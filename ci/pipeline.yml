---
jobs:
- name: build-admin-ui-release
  plan:
  - aggregate:
    - get: release-git-repo
      resource: admin-ui-release-git-repo
      trigger: true
    - get: pipeline-tasks
    - get: final-builds-dir-tarball
      resource: admin-ui-final-builds-dir-tarball
    - get: releases-dir-tarball
      resource: admin-ui-releases-dir-tarball
  - task: finalize-release
    file: pipeline-tasks/finalize-bosh-release.yml
    params:
      PRIVATE_YML_CONTENT: {{admin-ui-private-yml}}
  - aggregate:
    - put: admin-ui-release
      params:
        file: finalized-release/admin-ui-*.tgz
    - put: admin-ui-final-builds-dir-tarball
      params:
        file: finalized-release/final-builds-dir-admin-ui.tgz
    - put: admin-ui-releases-dir-tarball
      params:
        file: finalized-release/releases-dir-admin-ui.tgz

- name: deploy-admin-ui-staging
  serial: true
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: admin-ui-config
      trigger: true
    - get: admin-ui-release
      trigger: true
    - get: common
      resource: common-stage
      trigger: true
    - get: admin-ui-stemcell
      trigger: true
    - get: terraform-yaml
      resource: terraform-yaml-staging
      trigger: true
    - get: master-bosh-root-cert
  - task: admin-ui-manifest
    config: &manifest-config
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: 18fgsa/concourse-task
      inputs:
      - name: admin-ui-config
      - name: terraform-yaml
      - name: common
      outputs:
      - name: admin-manifest
      run:
        path: sh
        args:
        - -exc
        - |
          admin-ui-config/generate-manifest.sh \
            terraform-yaml/state.yml \
            common/secrets.yml \
            > admin-manifest/manifest.yml
  - put: admin-ui-staging-deployment
    params: &deploy-params
      cert: master-bosh-root-cert/master-bosh.crt
      manifest: admin-manifest/manifest.yml
      releases:
      - admin-ui-release/*.tgz
      stemcells:
      - admin-ui-stemcell/*.tgz
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy admin-ui on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed admin-ui on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}

- name: deploy-admin-ui-production
  serial: true
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: admin-ui-config
      passed: [deploy-admin-ui-staging]
      trigger: true
    - get: admin-ui-release
      passed: [deploy-admin-ui-staging]
      trigger: true
    - get: common
      resource: common-prod
      trigger: true
    - get: admin-ui-stemcell
      passed: [deploy-admin-ui-staging]
      trigger: true
    - get: terraform-yaml
      resource: terraform-yaml-production
      trigger: true
    - get: master-bosh-root-cert
  - task: admin-ui-manifest
    config: *manifest-config
  - put: admin-ui-production-deployment
    params: *deploy-params
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy admin-ui on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed admin-ui on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}

resources:
- name: master-bosh-root-cert
  type: s3-iam
  source:
    bucket: {{admin-ui-private-bucket-production}}
    region_name: {{aws-region}}
    versioned_file: master-bosh.crt

- name: common-stage
  type: cg-common
  source:
    bucket_name: {{admin-ui-private-bucket-staging}}
    secrets_file: admin-ui.yml
    secrets_passphrase: {{admin-ui-staging-private-passphrase}}
    bosh_cert: bosh.pem
    region: {{aws-region}}

- name: common-prod
  type: cg-common
  source:
    bucket_name: {{admin-ui-private-bucket-production}}
    secrets_file: admin-ui.yml
    secrets_passphrase: {{admin-ui-production-private-passphrase}}
    bosh_cert: bosh.pem
    region: {{aws-region}}

# - name: admin-ui-release
#   type: bosh-io-release
#   source:
#     repository: cloudfoundry-community/admin-ui-boshrelease
- name: admin-ui-release-git-repo
  type: git
  source:
    uri: {{admin-ui-release-git-url}}
    branch: {{admin-ui-release-git-branch}}

- name: admin-ui-release
  type: s3
  source:
    bucket: {{s3-bosh-releases-bucket}}
    regexp: admin-ui-(.*).tgz
    region_name: {{aws-region}}
    access_key_id: {{s3-bosh-releases-access-key-id}}
    secret_access_key: {{s3-bosh-releases-secret-access-key}}
    server_side_encryption: AES256

- name: admin-ui-final-builds-dir-tarball
  type: s3
  source:
    bucket: {{s3-bosh-releases-bucket}}
    versioned_file: final-builds-dir-admin-ui.tgz
    region_name: {{aws-region}}
    access_key_id: {{s3-bosh-releases-access-key-id}}
    secret_access_key: {{s3-bosh-releases-secret-access-key}}
    server_side_encryption: AES256

- name: admin-ui-releases-dir-tarball
  type: s3
  source:
    bucket: {{s3-bosh-releases-bucket}}
    versioned_file: releases-dir-admin-ui.tgz
    region_name: {{aws-region}}
    access_key_id: {{s3-bosh-releases-access-key-id}}
    secret_access_key: {{s3-bosh-releases-secret-access-key}}
    server_side_encryption: AES256

- name: admin-ui-config
  type: git
  source:
    uri: {{cg-deploy-admin-ui-git-url}}
    branch: {{cg-deploy-admin-ui-git-branch}}

- name: admin-ui-stemcell
  type: s3-iam
  source:
    bucket: {{stemcell-bucket}}
    regexp: light-bosh-stemcell-(.*)-aws-xen-hvm-ubuntu-trusty-go_agent.tgz
    region_name: {{aws-region}}

- name: admin-ui-staging-deployment
  type: 18f-bosh-deployment
  source:
    target: {{admin-ui-staging-deployment-bosh-target}}
    username: {{admin-ui-staging-deployment-bosh-username}}
    password: {{admin-ui-staging-deployment-bosh-password}}
    deployment: {{admin-ui-staging-deployment-bosh-deployment}}
    ignore_ssl: false

- name: admin-ui-production-deployment
  type: 18f-bosh-deployment
  source:
    target: {{admin-ui-production-deployment-bosh-target}}
    username: {{admin-ui-production-deployment-bosh-username}}
    password: {{admin-ui-production-deployment-bosh-password}}
    deployment: {{admin-ui-production-deployment-bosh-deployment}}
    ignore_ssl: false

- name: pipeline-tasks
  type: git
  source:
    uri: {{pipeline-tasks-git-url}}
    branch: {{pipeline-tasks-git-branch}}

- name: terraform-yaml-staging
  type: s3-iam
  source:
    bucket: {{tf-state-bucket-staging}}
    versioned_file: {{tf-state-file-staging}}
    region_name: {{aws-region}}

- name: terraform-yaml-production
  type: s3-iam
  source:
    bucket: {{tf-state-bucket-production}}
    versioned_file: {{tf-state-file-production}}
    region_name: {{aws-region}}

- name: slack
  type: slack-notification
  source:
    url: {{slack-webhook-url}}

resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource

- name: s3-iam
  type: docker-image
  source:
    repository: 18fgsa/s3-resource

- name: 18f-bosh-deployment
  type: docker-image
  source:
    repository: 18fgsa/bosh-deployment-resource

- name: cg-common
  type: docker-image
  source:
    repository: 18fgsa/cg-common-resource
